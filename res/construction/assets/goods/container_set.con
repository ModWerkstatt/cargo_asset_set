local constructionutil = require "constructionutil"

math.randomseed( os.time() )
function data()


local container = {
	{
	"asset/container_nando/container_20ft/container_20ft_cma.mdl",
	"asset/container_nando/container_20ft/container_20ft_csx.mdl",
	"asset/container_nando/container_20ft/container_20ft_dhl.mdl",
	"asset/container_nando/container_20ft/container_20ft_evergreen.mdl",
	"asset/container_nando/container_20ft/container_20ft_generic.mdl",
	"asset/container_nando/container_20ft/container_20ft_hamburg.mdl",
	"asset/container_nando/container_20ft/container_20ft_hanjin.mdl",
	"asset/container_nando/container_20ft/container_20ft_hl.mdl",
	"asset/container_nando/container_20ft/container_20ft_maersk.mdl",
	"asset/container_nando/container_20ft/container_20ft_pacer.mdl",
	"asset/container_nando/container_20ft/container_20ft_po.mdl",
	"asset/container_nando/container_20ft/container_20ft_pof.mdl",
	"asset/container_nando/container_20ft/container_20ft_samskip.mdl",
	"asset/container_nando/container_20ft/container_20ft_maikc.mdl"
	},
	{
	"asset/container_nando/container_40ft/container_40ft_cma.mdl",
	"asset/container_nando/container_40ft/container_40ft_csx.mdl",
	"asset/container_nando/container_40ft/container_40ft_dhl.mdl",
	"asset/container_nando/container_40ft/container_40ft_evergreen.mdl",
	"asset/container_nando/container_40ft/container_40ft_generic.mdl",
	"asset/container_nando/container_40ft/container_40ft_hamburg.mdl",
	"asset/container_nando/container_40ft/container_40ft_hanjin.mdl",
	"asset/container_nando/container_40ft/container_40ft_hl.mdl",
	"asset/container_nando/container_40ft/container_40ft_maersk.mdl",
	"asset/container_nando/container_40ft/container_40ft_pacer.mdl",
	"asset/container_nando/container_40ft/container_40ft_po.mdl",
	"asset/container_nando/container_40ft/container_40ft_pof.mdl",
	"asset/container_nando/container_40ft/container_40ft_samskip.mdl",
	"asset/container_nando/container_40ft/container_40ft_maikc.mdl",
	},
	{
	"asset/container_nando/container_45ft/container_45ft_cma.mdl",
	"asset/container_nando/container_45ft/container_45ft_csx.mdl",
	"asset/container_nando/container_45ft/container_45ft_dhl.mdl",
	"asset/container_nando/container_45ft/container_45ft_evergreen.mdl",
	"asset/container_nando/container_45ft/container_45ft_generic.mdl",
	"asset/container_nando/container_45ft/container_45ft_hamburg.mdl",
	"asset/container_nando/container_45ft/container_45ft_hanjin.mdl",
	"asset/container_nando/container_45ft/container_45ft_hl.mdl",
	"asset/container_nando/container_45ft/container_45ft_maersk.mdl",
	"asset/container_nando/container_45ft/container_45ft_pacer.mdl",
	"asset/container_nando/container_45ft/container_45ft_po.mdl",
	"asset/container_nando/container_45ft/container_45ft_pof.mdl",
	"asset/container_nando/container_45ft/container_45ft_samskip.mdl",
	"asset/container_nando/container_45ft/container_45ft_maikc.mdl"
	},
	{
	"asset/container_nando/container_53ft/container_53ft_cma.mdl",
	"asset/container_nando/container_53ft/container_53ft_csx.mdl",
	"asset/container_nando/container_53ft/container_53ft_dhl.mdl",
	"asset/container_nando/container_53ft/container_53ft_evergreen.mdl",
	"asset/container_nando/container_53ft/container_53ft_generic.mdl",
	"asset/container_nando/container_53ft/container_53ft_hamburg.mdl",
	"asset/container_nando/container_53ft/container_53ft_hanjin.mdl",
	"asset/container_nando/container_53ft/container_53ft_hl.mdl",
	"asset/container_nando/container_53ft/container_53ft_maersk.mdl",
	"asset/container_nando/container_53ft/container_53ft_pacer.mdl",
	"asset/container_nando/container_53ft/container_53ft_po.mdl",
	"asset/container_nando/container_53ft/container_53ft_pof.mdl",
	"asset/container_nando/container_53ft/container_53ft_samskip.mdl",
	"asset/container_nando/container_53ft/container_53ft_maikc.mdl"
	}
}	
local nameCont = {
			"ui/parameters/container_random.tga", 
			"ui/parameters/container_cma.tga", 
			"ui/parameters/container_csx.tga",
			"ui/parameters/container_dhl.tga",
			"ui/parameters/container_evergreen.tga", 
			"ui/parameters/container_generic.tga", 
			"ui/parameters/container_hamburg.tga",
			"ui/parameters/container_hanjin.tga",
			"ui/parameters/container_hl.tga", 
			"ui/parameters/container_maersk.tga", 
			"ui/parameters/container_pacer.tga",
			"ui/parameters/container_po.tga",
			"ui/parameters/container_pof.tga", 
			"ui/parameters/container_samskip.tga", 
			"ui/parameters/container_maikc.tga", 
}

return { 
	type = "ASSET_DEFAULT",
	description = {
		name = _("name_asset1"),			
		description = _("desc_asset1")
	},
	availability = {
					yearFrom = 1979,
					yearTo = 0
	},
	buildMode = "MULTI",
	categories = { "goods" },
	order = 223221001,
	skipCollision = true,
	autoRemovable = false,
	params = {
		{
			key = "size",
			name = _("name_size"),
			uiType = "ICON_BUTTON",
			values = { 
			"ui/parameters/container_20ft.tga", 
			"ui/parameters/container_40ft.tga",
			"ui/parameters/container_45ft.tga",
			"ui/parameters/container_53ft.tga", 
			},
		},
		{
			key = "name",
			name = _("name_brand"),
			uiType = "ICON_BUTTON",
			values = nameCont
		},
		{
			key = "position",
			name = _("name_position"),
			uiType = "BUTTON",
			values = { "Standard", "+30 cm", "+90 cm" }
		},
		{
			key = "hinter",
			name = _("name_hintereinander"),
			uiType = "SLIDER",
			values = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }
		},
		{
			key = "neben",
			name = _("name_nebeneinander"),
			uiType = "SLIDER",
			values = { "1", "2", "3", "4", "5" }
		},
		{
			key = "abstand",
			name = _("name_abstand"),
			uiType = "SLIDER",
			values = { "0", "0.2", "0.5", "1", "1.5" }
		},
		{
			key = "stapel",
			name = _("name_stapel"),
			uiType = "SLIDER",
			values = { _("x6"), _("x5"), _("x4"),  _("x3"), _("x2"), _("Std"), _("x2"), _("x3"), _("x4"),  _("x5"), _("x6") },
			defaultIndex = 5,
		},
		-- {
			-- key = "pouj",
			-- name = _("name_pouj"),
			-- uiType = "CHECKBOX",
			-- values = {"0", "1", },
		-- },		
		{
			key = "terrain",
			name = _("name_terrain"),
			uiType = "CHECKBOX",
			values = {"0", "1", },
		},		
		
	},
	updateFn = function(params)
		local result = { }
		result.models = {  }
		local contID
		local laenge = 0
		local breite = 2.4384
		local hoehe = 2.6
		local pos = 0
		local minstapel = 1			-- Mindestanzahl Container bei zufälliger Stapelhöhe
		local pouj = 1             	-- params.pouj 
		
		-- Stapelhöhe 
		local stapelhoehe = 1
			if params.stapel ~= 5 then
				if params.stapel < 5 then
					stapelhoehe = (-6 + params.stapel)*-1
				else
					stapelhoehe =  params.stapel-4
				end	
			end
		local staho = stapelhoehe
		
		
		
		-- Abstand zwischen den Reihen in Containerbreite
		if params.abstand == 0 then
			breite = breite
		elseif params.abstand == 1 then
			breite = breite+(breite*0.2)
		elseif params.abstand == 2 then
			breite = breite+(breite*0.5)
		elseif params.abstand == 3 then
			breite = breite+(breite*1.0)
		elseif params.abstand == 4 then
			breite = breite+(breite*1.5)
		end

		-- Starthoehe
		if params.position == 1 then
			pos = 0.3
		elseif params.position == 2 then
			pos = 0.9
		end
		
		-- Länge der Container + 0.3 Abstand
		if params.size == 0 then
				laenge = 6.096 + 0.3
			elseif params.size == 1 then
				laenge = 12.192 + 0.3
			elseif params.size == 2 then
				laenge = 13.716 + 0.3
			elseif params.size == 3 then
				laenge = 16.154 + 0.3
		end

		-- Stapel erstellen
		for i = 1 ,(params.hinter+1) do
		 local x = ( i * laenge) - laenge
			for i = 1 , (params.neben+1) do
				local y = (i*breite)-breite
				if params.stapel < 5 then
				if stapelhoehe < minstapel   then minstapel = 1 end
				staho = math.random(minstapel,stapelhoehe)				-- zufällige höhe	math.random(1,params.stapel+1)
				end
					for i = 1, staho do										-- for i = 1, (params.stapel+1) do
						local z = ((i*hoehe)-hoehe)+pos
							if params.name > 0 then 
								if pouj == 1 then
									contID = container[params.size+1][params.name]
									result.models[#result.models+1] = { id = contID, transf = constructionutil.rotateTransf(params,{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1 }),}
								else
									contID = container[params.size+1][params.name]
									result.models[#result.models+1] = { id = contID, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1 } }
								end
							else
								if pouj == 1 then
									contID = container[params.size+1][math.random(1,#nameCont-1)]
									result.models[#result.models+1] = { id = contID, transf = constructionutil.rotateTransf(params,{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1 }),}
								else
									contID = container[params.size+1][math.random(1,#nameCont-1)]
									result.models[#result.models+1] = { id = contID, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1 } }
								end
							end	
					end
			end
		end
		
		-- Terrain Angleichung
		local terrainFaces = { }
		if params.terrain == 1 then
		terrainFaces[#terrainFaces + 1] = 
			{
				{(laenge*(params.hinter+1))-(laenge/2)+1, (breite*(params.neben+1))-(breite/2)+1, 0},
				{(laenge*(params.hinter+1))-(laenge/2)+1, (-(breite/2))-1, 0},
				{(-(laenge/2))-1, (-(breite/2))-1, 0},
				{(-(laenge/2))-1, (breite*(params.neben+1))-(breite/2)+1, 0},
			}	
		end
		
		result.terrainAlignmentLists = { {
			type = "EQUAL",
			faces =  { }
		} }
		if (params.neben > 1 or params.hinter >1) then 
		result.groundFaces = { }
		result.groundFaces[#result.groundFaces + 1] = { face = { {0.01, -0.01}, { 0.01, 0.01}, {-0.01, 0.01}, {-0.01, -0.01} }, modes = { { type = "FILL", key = "industry_floor.lua" } } }
		else
		
		end
		return result
	end
}
end